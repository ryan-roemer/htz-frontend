import React, { Component, } from 'react';
import PropTypes from 'prop-types';
import { createComponent, } from 'react-fela';
import { border, borderBottom, borderStart, parseStyleProps, } from '@haaretz/htz-css-tools';
import { stylesPropType, } from '../../propTypes/stylesPropType';
import { attrsPropType, } from '../../propTypes/attrsPropType';

const styles = ({ miscStyles, theme, }) => ({
  display: 'flex',
  alignItems: 'center',
  margin: '5rem',
  position: 'relative',
  extend: [ ...(miscStyles ? parseStyleProps(miscStyles, theme.mq, theme.type) : []), ],
});

const checkBoxStyle = ({ checked, isDisabled, theme, }) => ({
  height: '2rem',
  width: '2rem',
  backgroundColor: checked ? theme.color('checkBox', 'bgChecked') : theme.color('checkBox', 'bg'),
  transitionProperty: 'all',
  extend: [
    border(
      '1px',
      0.2,
      'solid',
      isDisabled ? theme.color('checkBox', 'borderDisabled') : theme.color('checkBox', 'border')
    ),
    theme.getTransition(1, 'swiftIn'),
  ],
});

const StyledCheckBox = createComponent(checkBoxStyle);

const rippleStyle = ({ isFocused, theme, }) => ({
  position: 'absolute',

  height: '8rem',
  width: '8rem',
  right: '-7rem',
  top: '50%',
  borderRadius: '50%',
  backgroundColor: theme.color('checkBox', 'ripple'),
  display: 'block',
  opacity: 0,
  ...(isFocused
    ? {
      animationDuration: '0.5s',
      animationDirection: 'alternate',
      animationName: [
        {
          '0%': {
            opacity: 0,
            transform: 'translate(-50%, -50%) scale(0)',
          },

          '50%': {
            opacity: '.3',
          },

          '70%': {
            transform: 'translate(-50%, -50%) scale(1)',
          },

          '100%': {
            opacity: 0,
            transform: 'translate(-50%, -50%) scale(0)',
          },
        },
      ],
    }
    : {}),
});

const StyledRipple = createComponent(rippleStyle);

const checkStyle = ({ checked, theme, }) => ({
  height: '100%',
  width: '50%',
  backgroundColor: 'transparent',
  transform: 'rotate(35deg) translate(-45%, 0%)',
  overflow: 'hidden',
  opacity: checked ? 1 : 0,
  transitionProperty: 'all',
  extend: [
    borderBottom('2px', 0, 'solid', theme.color('checkBox', 'check')),
    borderStart('2px', 'solid', theme.color('checkBox', 'check')),
    theme.getTransition(1, 'swiftIn'),
  ],
});

const StyledCheck = createComponent(checkStyle);

const spanStyle = () => ({
  marginInlineStart: '0.3em',
});

const StyledSpan = createComponent(spanStyle);

export class CheckBox extends Component {
  static propTypes = {
    /**
     * An object of attrbutes to set on the DOM element.
     * Passed to the underlying label element wrapping the checkbox input in this component
     */
    attrs: attrsPropType,
    /**
     * Is the checkBox checked
     * Should never be passed manually by the consumer, but rather
     * set by the controlling component.
     */
    checked: PropTypes.bool,
    /** Class(es) to be added to the DOM element.
     * Automatically generated by Fela, do not enter manually.
     */
    className: PropTypes.string,
    /**
     * The checkBoxId that connects the label for with the checkBox,
     * if no checkBoxId is provided, and checkBoxId will be generated automatically
     */
    checkBoxId: PropTypes.string,
    /**
     * Is The checkBox disabled
     */
    isDisabled: PropTypes.bool,
    /**
     * The label text/node associated with the checkbox
     */
    label: PropTypes.oneOf([ PropTypes.string, PropTypes.node, ]),
    /**
     * A callback that gets the event that holds new checked value of the checkbox
     * used to update state of parent when using as react controlled checkbox
     * @param {SyntheticEvent} evt - The event object
     */
    onChange: PropTypes.func,
    /**
     * miscStyles of the label
     * A special property holding miscellaneous CSS values that
     * trump all default values. Processed by
     * [`parseStyleProps`](https://Haaretz.github.io/htz-frontend/htz-css-tools#parsestyleprops)
     */
    miscStyles: stylesPropType,
  };
  static defaultProps = {
    attrs: null,
    checked: null,
    className: null,
    checkBoxId: null,
    isDisabled: false,
    label: null,
    onChange: null,
    miscStyles: null,
  };
  state = {
    checkBoxId: this.props.checkBoxId || Math.random().toString(),
    checked: this.props.checked !== null ? this.props.checked : false,
    isFocused: false,
  };

  render() {
    const { attrs, checked, className, isDisabled, label, onChange, } = this.props;
    return (
      <label htmlFor={this.state.checkBoxId} className={className}>
        <input
          type="checkbox"
          {...attrs}
          checked={this.state.checked}
          {...(isDisabled ? { disabled: true, } : {})}
          id={this.state.checkBoxId}
          onClick={evt => {
            if (!isDisabled) {
              if (checked === null) {
                this.setState((prevState, props) => ({
                  checked: !prevState.checked,
                }));
              }
              if (attrs && attrs.onClick) attrs.onClick(evt);
            }
          }}
          onFocus={evt => {
            this.setState((prevState, props) => ({
              isFocused: true,
            }));
            if (attrs && attrs.onFocus) attrs.onFocus(evt);
          }}
          onBlur={evt => {
            this.setState((prevState, props) => ({
              isFocused: false,
            }));
            if (attrs && attrs.onBlur) attrs.onBlur(evt);
          }}
          {...(onChange ? { onChange, } : {})}
        />
        <StyledRipple isFocused={this.state.isFocused} />
        <StyledCheckBox checked={this.state.checked} isDisabled={isDisabled}>
          <StyledCheck checked={this.state.checked} />
        </StyledCheckBox>
        <StyledSpan>{label}</StyledSpan>
      </label>
    );
  }
}

export default createComponent(styles, CheckBox, [
  'attrs',
  'checked',
  'checkBoxId',
  'label',
  'onChange',
  'isDisabled',
]);
