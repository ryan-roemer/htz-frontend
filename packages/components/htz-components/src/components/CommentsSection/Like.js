import React from 'react';
import PropTypes from 'prop-types';
import { createComponent, } from 'react-fela';
import { parseStyleProps, } from '@haaretz/htz-css-tools';
import IconDislike from '../Icon/icons/IconDislike';
import IconLike from '../Icon/icons/IconLike';
import { stylesPropType, } from '../../propTypes/stylesPropType';

const propTypes = {
  /** Class(es) to be added to the DOM element.
   * Automatically generated by Fela, do not enter manually.
   */
  className: PropTypes.string,
  /**
   * used by initVote func to idenfy comment that is voted for
   */
  commentId: PropTypes.string.isRequired,
  /**
   * Insert a color from the htz-theme color pallete
   */
  iconColor: PropTypes.string,
  /**
   * A callaback that initiates a vote, `<Likes />` sends up the commentId and the rate ("plus"/"minus")
   */
  initVote: PropTypes.func.isRequired,
  /**
   * Is this a disLike (minus vote)
   */
  isDisLike: PropTypes.bool,
  /**
   * A special property holding miscellaneous CSS values that
   * trump all default values. Processed by
   * [`parseStyleProps`](https://Haaretz.github.io/htz-frontend/htz-css-tools#parsestyleprops)
   */
  // eslint-disable-next-line react/no-unused-prop-types
  miscStyles: stylesPropType,
  /**
   * number of votes
   */
  rate: PropTypes.number,
};

const defaultProps = {
  className: null,
  iconColor: 'primary',
  isDisLike: false,
  miscStyles: null,
  rate: 0,
};

const counterStyle = ({ theme, }) => ({
  color: theme.color('neutral', '-3'),
  verticalAlign: 'center',
  marginInlineStart: '1rem',
  fontWeight: 'bold',
  extend: [ theme.type(-2), ],
});

const Counter = createComponent(counterStyle, 'span');

const styles = ({ theme, miscStyles, }) => ({
  display: 'inline-flex',
  alignItems: 'center',
  marginInlineStart: '2rem',
  extend: [
    ...(miscStyles ? parseStyleProps(miscStyles, theme.mq, theme.type) : []),
  ],
});

export function Like({
  commentId,
  iconColor,
  initVote,
  isDisLike,
  rate,
  className,
}) {
  function executeVote() {
    const likeSign = isDisLike ? 'minus' : 'plus';
    initVote(commentId, likeSign);
  }
  return (
    // todo: get design for active, focus and previously liked
    <button className={className} type="button" onClick={() => executeVote()}>
      {isDisLike ? (
        <IconDislike size={4} color={iconColor} />
      ) : (
        <IconLike size={4} color={iconColor} />
      )}

      <Counter>{rate}</Counter>
    </button>
  );
}

Like.propTypes = propTypes;

Like.defaultProps = defaultProps;

const StyledLike = createComponent(styles, Like, [
  'commentId',
  'iconColor',
  'initVote',
  'isDisLike',
  'rate',
]);

export default StyledLike;
