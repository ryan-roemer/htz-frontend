import PropTypes from 'prop-types';
import { stylesPropType, } from '../../propTypes/stylesPropType';
import { attrsPropType, } from '../../propTypes/attrsPropType';

export const radioButtonPropType = {
  /**
   * An object of attrbutes to set on the DOM element.
   * Passed to the underlying label element wrapping the radioButton input in this component
   */
  attrs: attrsPropType,
  /**
   * Is the radioButton checked
   * Should never be passed manually by the consumer, but rather
   * set by the controlling component.
   */
  checked: PropTypes.bool,
  /** Class(es) to be added to the DOM element.
   * Automatically generated by Fela, do not enter manually.
   */
  className: PropTypes.string,
  /**
   * Is The radioButton disabled
   */
  isDisabled: PropTypes.bool,
  /**
   * The label text/node associated with the radioButton
   */
  label: PropTypes.oneOfType([ PropTypes.string, PropTypes.node, ]).isRequired,
  /**
   * miscStyles of the label
   * A special property holding miscellaneous CSS values that
   * trump all default values. Processed by
   * [`parseStyleProps`](https://Haaretz.github.io/htz-frontend/htz-css-tools#parsestyleprops)
   */
  miscStyles: stylesPropType,
  /**
   * The radio element name, used to identify it as part of a radio group
   */
  name: PropTypes.string,
  /**
   * A callback that gets called when the RadioButton is Blurred
   * @param {SyntheticEvent} evt - The event object
   */
  onBlur: PropTypes.func,
  /**
   * A callback that gets the event that holds new checked value of the radioButton
   * used to update state of parent when using as react controlled radioButton
   * @param {SyntheticEvent} evt - The event object
   */
  onChange: PropTypes.func,
  /**
   * A callback that gets called when the RadioButton is clicked
   * @param {SyntheticEvent} evt - The event object
   */
  onClick: PropTypes.func,
  /**
   * A callback that gets called when the RadioButton is focused
   * @param {SyntheticEvent} evt - The event object
   */

  onFocus: PropTypes.func,
  /**
   * The radioButtonId that connects the label for with the radioButton,
   * if no radioButtonId is provided, and radioButtonId will be generated automatically
   */
  radioButtonId: PropTypes.string,
  /**
   * A callback function to allow parent component to get ref of input,
   * example use case: focusing the input.
   */
  refFunc: PropTypes.func,
  /**
   * The radio input value, must be a string because the value on the input will always be a string
   */
  value: PropTypes.string,
};
